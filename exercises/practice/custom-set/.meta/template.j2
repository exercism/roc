{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header() }}

import {{ exercise | to_pascal }} exposing [
    contains,
    difference,
    from_list,
    insert,
    intersection,
    is_disjoint_with,
    is_empty,
    is_eq,
    is_subset_of,
    to_list,
    union,
]

{%
set property_map = {
    "add": "insert",
    "disjoint": "is_disjoint_with",
    "empty": "is_empty",
    "equal": "is_eq",
    "subset": "is_subset_of",
}
%}

{% for supercase in cases %}
##
## {{ supercase["description"] }}
##

{% for case in supercase["cases"] -%}
# {{ case["description"] }}
{% set property = property_map.get(case["property"], case["property"]) %}
expect
    {%- if "set" in case["input"] %}
    set = from_list {{ case["input"]["set"] | to_roc }}
    result = set |> {{ property | to_snake }}
    {%- if "element" in case["input"] %} {{ case["input"]["element"] }}{%- endif %}
    {%- else %}
    set1 = from_list {{ case["input"]["set1"] | to_roc }}
    set2 = from_list {{ case["input"]["set2"] | to_roc }}
    result = set1 |> {{ property | to_snake }} set2
    {%- endif %}
    {%- if case["expected"] is iterable %}
    expected = {{ case["expected"] | to_roc }} |> from_list
    result |> is_eq expected
    {%- else %}
    expected = {{ case["expected"] | to_roc }}
    result == expected
    {%- endif %}

{% endfor %}
{% endfor %}

##
## A set can be converted to a list of items
##

{% for case in additional_cases -%}
# {{ case["description"] }}
expect
    set = from_list {{ case["input"]["set"] | to_roc }}
    result = set |> to_list |> List.sort_asc
    expected = {{ case["expected"] | to_roc }}
    result == expected

{% endfor %}