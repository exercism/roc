{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header() }}

import {{ exercise | to_pascal }} exposing [findChain]

{% macro to_list_of_pairs(dominoes) -%}
[
{%- for domino in dominoes -%}
({{ domino[0] }}, {{ domino[1] }}),
{%- endfor -%}
]
{%- endmacro %}

Domino : (U8, U8)

## Rotate each domino if needed to ensure that the small side is on the left
canonicalize : List Domino -> List Domino
canonicalize = \dominoes ->
    dominoes
    |> List.map \domino ->
        if domino.0 > domino.1 then (domino.1, domino.0) else domino

## Ensure that the given result is Ok and is a valid chain for the
## given list of dominoes
isValidChainFor : Result (List Domino) _, List Domino -> Bool
isValidChainFor = \maybeChain, dominoes ->
    when maybeChain is
        Err _ -> Bool.false
        Ok chain ->
            if Set.fromList (canonicalize chain) == Set.fromList (canonicalize dominoes) then
                when chain is
                    [] -> Bool.true
                    [.., last] ->
                        chain
                        |> List.walkUntil (Ok last) \state, domino ->
                            when state is
                                Err InvalidChain -> crash "Unreachable"
                                Ok previous ->
                                    if previous.1 == domino.0 then
                                        Continue (Ok domino)
                                    else
                                        Break (Err InvalidChain)
                        |> Result.isOk
            else
                Bool.false

{% for case in cases -%}
# {{ case["description"] }}
expect
    result = findChain {{ to_list_of_pairs(case["input"]["dominoes"]) }}
    {%- if case["expected"] %}
    result |> isValidChainFor {{ to_list_of_pairs(case["input"]["dominoes"]) }}
    {%- else %}
    result |> Result.isErr
    {%- endif %}

{% endfor %}
