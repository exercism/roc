{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header() }}

import {{ exercise | to_pascal }} exposing [smallest, largest]

is_eq = |result, expected|
    when (result, expected) is
        (Ok({value, factors}), Ok({value: expected_value, factors: expected_factors})) ->
            value == expected_value && factors == expected_factors
        _ -> Bool.false

{% for case in cases -%}
# {{ case["description"] }}
expect
    result = {{ case["property"] | to_snake }}({{ case["input"] | to_roc }})
    {%- if case["expected"]["error"] %}
    result |> Result.is_err
    {%- else %}
    expected = Ok({
        value: {% if case["expected"]["value"] is none %}0{% else %}{{ case["expected"]["value"] }}{% endif %},
        factors: Set.from_list([
            {%- for pair in case["expected"]["factors"] %}
            ({{ pair[0] }}, {{ pair[1] }}),{% endfor %}
        ])
    })
    result |> is_eq(expected)
    {%- endif %}

{% endfor %}

