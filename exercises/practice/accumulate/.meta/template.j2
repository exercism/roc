{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header() }}

import {{ exercise | to_pascal }} exposing [{{ cases[0]["property"] | to_snake }}]

{% set accumulators = {
    "(x) => x * x": "|x|\n        x * x",
    "(x) => upcase(x)": "to_upper",
    "(x) => reverse(x)": "reverse",
    "(x) => accumulate([\"1\", \"2\", \"3\"], (y) => x + y)": "|x|\n        accumulate([\"1\", \"2\", \"3\"], |y| Str.concat(x, y))"
} -%}

{% for case in cases -%}
# {{ case["description"] }}
expect
    result = {{ case["property"] | to_snake }}({{ case["input"]["list"] | to_roc }}, {{ accumulators[case["input"]["accumulator"]] }})
    result == {{ case["expected"] | to_roc }}

{% endfor %}

reverse : Str -> Str
reverse = |str|
    Str.to_utf8(str)
    |> List.reverse
    |> Str.from_utf8
    |> Result.with_default("")

to_upper : Str -> Str
to_upper = |str|
    Str.to_utf8(str)
    |> List.map(
        |byte|
            if 'a' <= byte && byte <= 'z' then
                byte - 'a' + 'A'
            else
                byte
    )
    |> Str.from_utf8
    |> Result.with_default("")
