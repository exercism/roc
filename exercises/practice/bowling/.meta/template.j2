{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header() }}

import {{ exercise | to_pascal }} exposing [Game, create, roll, score]

replay_game : List U64 -> Result Game _
replay_game = \rolls ->
    new_game = create? {}
    rolls
    |> List.walkUntil (Ok new_game) \state, pins ->
        when state is
            Ok game ->
                when game |> roll pins is
                    Ok updated_game -> Continue (Ok updated_game)
                    Err err -> Break (Err err)

            Err _ -> crash "Impossible, we don't start or Continue with an Err"


{% for case in cases -%}
# {{ case["description"] }}
expect
    maybe_game = create { previous_rolls : {{ case["input"]["previousRolls"] | to_roc }} }
    {%- if case["property"] == "score" %}
    result = maybe_game |> Result.try \game -> score game
    {%- else %}
    result = maybe_game |> Result.try \game ->
        game |> {{ case["property"] | to_snake }} {{ case["input"]["roll"] }}
    {%- endif %}
    {%- if case["expected"]["error"] %}
    result |> Result.isErr
    {%- else %}
    result == Ok {{ case["expected"] | to_roc }}
    {%- endif %}
    {%- if case["property"] == "score" and not case["expected"]["error"] %}

# should be able to replay this finished game from the start
expect
    rolls = {{ case["input"]["previousRolls"] | to_roc }}
    result = replay_game rolls
    result |> Result.isOk

    {%- endif %}


{% endfor %}