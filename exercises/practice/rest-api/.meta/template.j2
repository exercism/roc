{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header(imports=["json"]) }}

import {{ exercise | to_pascal }} exposing [get, post]

standardize_result = |result|
    result
    |> Result.try(
        |string|
            string
            |> Str.replace_each(".0,", ",")
            |> Str.replace_each(".0}", "}")
            |> Str.to_utf8
            |> List.drop_if |c| [' ', '\t', '\n'] |> List.contains(c)
            |> Str.from_utf8
    )

{% for supercase in cases %}
##
## {{ supercase["description"] }}
##

{% for case in supercase["cases"] -%}
# {{ case["description"] }}
expect
    database = {
        users: [
            {%- for user in case["input"]["database"]["users"] %}
            {
                name: {{ user["name"] | to_roc }},
                owes: Dict.from_list([
                    {%- for (name, amount) in user["owes"].items() %}
                    ({{ name | to_roc }}, {{ amount }}),
                    {%- endfor -%}
                ]),
                owed_by: Dict.from_list([
                    {%- for (name, amount) in user["owed_by"].items() %}
                    ({{ name | to_roc }}, {{ amount }}),
                    {%- endfor -%}
                ]),
                balance: {{ user["balance"] }},
            },
            {%- endfor %}
        ]
    }
    result = database |> {{ case["property"] | to_snake }}({
        url: {{ case["input"]["url"] | to_roc }},
    {%- if case["input"].get("payload", {}) != {} %}
        payload: {{ case["input"]["payload"] | tojson | to_roc }}
    {%- endif %}
    }) |> standardize_result
    expected = Ok({{ case["expected"] | tojson | replace(".0,", ",") | replace(".0}", "}") | replace(" ", "") | to_roc }})
    result == expected

{% endfor %}
{% endfor %}
