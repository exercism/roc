{%- import "generator_macros.j2" as macros with context -%}
{{ macros.canonical_ref() }}
{{ macros.header() }}

import {{ exercise | to_pascal }} exposing [create, rank, file, queen_can_attack]

{% for supercase in cases %}
##
## {{ supercase["description"] }}
##

{% for case in supercase["cases"] -%}
# {{ case["description"] }}
{%- if case["property"] == "create" %}
    {%- if case["expected"] == 0 %}
expect
    maybe_square = create("{{ plugins.to_square(case["input"]["queen"]) }}")
    result = maybe_square |> Result.try( |square| Ok(rank square) )
    result == Ok({{ plugins.to_rank(case["input"]["queen"]["position"]["row"]) }})

expect
    maybe_square = create("{{ plugins.to_square(case["input"]["queen"]) }}")
    result = maybe_square |> Result.try( |square| Ok(file square) )
    result == Ok('{{ plugins.to_file(case["input"]["queen"]["position"]["column"]) }}')
    {%- else %}
expect
    result = create("{{ plugins.to_square(case["input"]["queen"]) }}")
    result |> Result.is_err
    {%- endif %}
{%- elif case["property"] == "canAttack" %}
expect
    maybe_square1 = create("{{ plugins.to_square(case["input"]["white_queen"]) }}")
    maybe_square2 = create("{{ plugins.to_square(case["input"]["black_queen"]) }}")
    result = when (maybe_square1, maybe_square2) is
        (Ok(square1), Ok(square2)) ->
            square1 |> queen_can_attack(square2)
        _ -> crash "Unreachable: {{ plugins.to_square(case["input"]["white_queen"]) }} and {{ plugins.to_square(case["input"]["black_queen"]) }} are both valid squares"
    result == {{ case["expected"] | to_roc }}
{%- endif %}

{% endfor %}
{% endfor %}
